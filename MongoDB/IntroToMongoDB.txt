Create a database called 'my_first_db'.
    1) Open a terminal and type: sudo mongod (this will allow us to run our server).
    2) Open another terminal and type: sudo mongo (this runs our Mongo server!)
        2.5) Type: use my_first_db (this will create a MongoDB with the name "my_first_db". If the DB already existed, it will simply use it, and not recreate it.)


Create students collection.
    1) Within the Mongo terminal, type: db.createCollection("students")

Each document you insert into this collection should have the following format: ({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})
Create 5 students with the appropriate info.
    1) Within the Mongo terminal, type: 
    db.students.insert({name: "SpongeBob", home_state: "Bikini Bottom", lucky_number: 42, birthday: {month: 05, day: 01, year: 1999}})
    db.students.insert({name: "Kyle", home_state: "Colorado", lucky_number: 13, birthday: {month: 04, day: 20, year: 1990}})
    db.students.insert({name: "Cartman", home_state: "Colorado", lucky_number: 150, birthday: {month: 08, day: 07, year: 1990}})
    db.students.insert({name: "Stan", home_state: "Colorado", lucky_number: 7, birthday: {month: 12, day: 25, year: 1990}})
    db.students.insert({name: "Kenny", home_state: "Colorado", lucky_number: 666, birthday: {month: 06, day: 06, year: 1990}})

Get all students.
    1) Within the Mongo terminal and the database my_first_db, type:
    db.students.find({}) (add .prett() at the end for pretty formatting (allows easier human reading))

Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).
    1) Within the Mongo terminal and the database my_first_db, type:
    db.students.find({$or: [{home_state: "Washington"}, {home_state: "Colorado"}]})

Get all students whose lucky number is:
greater than 3
less than or equal to 10
between 1 and 9 (inclusive)
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.find({lucky_number: {$gt: 3}}) (returns entries of students with lucky number greater than 3)
        db.students.find({lucky_number: {$lte: 10}}) (returns entries of students with lucky number less or equal to 10)
        db.students.find({$and: [{lucky_number: {$gte: 1}}, {lucky_number: {$lte: 9}}]}) (returns entries of students with lucky numbers between 1 and 9 (inclusive))

Add a field to each student collection called 'interests' that is an ARRAY.  It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation.
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.update({name: "SpongeBob"}, {$push: {interests: {$each: ["coding", "brunch", "MongoDB"]}}})
        db.students.update({name: "Kyle"}, {$push: {interests: {$each: ["coding", "brunch", "MongoDB"]}}})
        db.students.update({name: "Cartman"}, {$push: {interests: {$each: ["coding", "brunch", "MongoDB"]}}})
        db.students.update({name: "Stan"}, {$push: {interests: {$each: ["coding", "brunch", "MongoDB"]}}})
        db.students.update({name: "Tart"}, {$push: {interests: {$each: ["coding", "brunch", "MongoDB"]}}})

Add some unique interests for each particular students into each of their interest arrays.
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.update({name: "SpongeBob"}, {$addToSet: {interests: "Crabby Patties"}})
        db.students.update({name: "Kyle"}, {$addToSet: {interests: "Hate of Cartman"}})
        db.students.update({name: "Cartman"}, {$addToSet: {interests: "Annoying Kyle"}})
        db.students.update({name: "Stan"}, {$addToSet: {interests: "Wendy"}})
        db.students.update({name: "Kenny"}, {$addToSet: {interests: "Staying Alive"}})

Add the interest 'taxes' into someone's interest array.
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.update({name: "Kyle"}, {$addToSet: {interests: "taxes"}})

Remove the 'taxes' interest you just added.
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.update({name: "Kyle"}, {$pull: {interests: "taxes"}})

Remove all students who are from California (or Washington).
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.remove({home_state: "Washington"}, false)

Remove a user by name. 
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.remove({name: "SpongeBob"});

Remove a student whose lucky number is greater than 5 (JUST ONE)
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.remove({lucky_number: {$gt: 5}})

Add a field to each student collection called 'number_of_belts' and set it to 0.
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.update({name: "SpongeBob"}, {$set: {number_of_belts: 0}})
        db.students.update({name: "Kyle"}, {$set: {number_of_belts: 0}})
        db.students.update({name: "Cartman"}, {$set: {number_of_belts: 0}})
        db.students.update({name: "Stan"}, {$set: {number_of_belts: 0}})
        db.students.update({name: "Kenny"}, {$set: {number_of_belts: 0}})

Increment this field by 1 for all students in Washington (Seattle Dojo).
    1) Within the mongo terminal and the database my_first_db, type:
        db.students.update({home_state: "Washington"}, {$set: {number_of_belts: 1}}, {multi: true})

Rename the 'number_of_belts' field to 'belts_earned'
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.update({}, {$rename: {"number_of_belts": "belts_earned"}}, false, true)

Remove the 'lucky_number' field.
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.update({}, {$unset: {lucky_number: ""}}, false, true)

Add a 'updated_on' field, and set the value as the current date.
    1) Within the Mongo terminal and the database my_first_db, type:
        db.students.update({}, {$set: {updated_on: new Date()}}, false, true)